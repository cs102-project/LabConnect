package me.labconnect.webapp.models.users.services;

import me.labconnect.webapp.models.data.Course;
import me.labconnect.webapp.models.users.*;
import me.labconnect.webapp.repository.*;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * A service class used for injecting new users into the database
 *
 * @author Vedat Eren ArÄ±can
 * @version 01.05.2021
 */
@Service
public class UserCreatorService {

    @Autowired
    private TARepository taRepository;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private TutorRepository tutorRepository;
    @Autowired
    private InstructorRepository instructorRepository;
    @Autowired
    private StudentRepository studentRepository;
    @Autowired
    private PasswordEncoder passwordEncoder;

    /**
     * An enumeration of the possible role types, used for authorization.
     */
    public enum LCUserRoleTypes {
        TEACHING_ASSISTANT, TUTOR, INSTRUCTOR, STUDENT
    }

    private LCUserRoleTypes roleType;
    private ObjectId roleDocumentId;
    private String institution;
    private String institutionId;
    private List<Course> courses;
    private String name;
    private String email;
    private String password;

    /**
     * Initialize the service with empty properties
     * <p>
     * This class is effectively a singleton managed by Spring,
     * so instead of calling this constructor, the previous configuration
     * should be overridden via method calls for adding new users.
     */
    public UserCreatorService() {
        this.courses = new ArrayList<>();
    }

    /**
     * Set the role type for the new user
     *
     * @param roleType The role of the new user
     * @return This UserCreatorService instance for further configuration
     */
    public UserCreatorService setRoleType(LCUserRoleTypes roleType) {
        this.roleType = roleType;
        return this;
    }

    /**
     * Set the institution this user belongs to
     *
     * @param institution The name of the institution, which is case-sensitive
     * @return This UserCreatorService instance for further configuration
     */
    public UserCreatorService setInstitution(String institution) {
        this.institution = institution;
        return this;
    }

    /**
     * Set the unique institution ID of this user. Not to be confused with object ID, which is generated by the database.
     *
     * @param institutionId The unique institution ID of the user
     * @return This UserCreatorService instance for further configuration
     */
    public UserCreatorService setInstitutionId(String institutionId) {
        this.institutionId = institutionId;
        return this;
    }

    /**
     * Set the courses this user is associated with
     *
     * @param courses The courses this user is associated with as separate arguments
     * @return This UserCreatorService instance for further configuration
     */
    public UserCreatorService setCourses(Course... courses) {
        this.courses = Arrays.asList(courses);
        return this;
    }

    /**
     * Set the name of this user
     *
     * @param name The full name of the user
     * @return This UserCreatorService instance for further configuration
     */
    public UserCreatorService setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Set the e-mail address of the user
     *
     * @param email The e-mail address of the user
     * @return This UserCreatorService instance for further configuration
     */
    public UserCreatorService setEmail(String email) {
        this.email = email;
        return this;
    }

    /**
     * Set the password of the user
     *
     * @param password The password, which is encrypted during user creation
     * @return This UserCreatorService instance for further configuration
     */
    public UserCreatorService setPassword(String password) {
        this.password = password;
        return this;
    }


    /**
     * Create a new user based on prior configuration and inject said user into the database
     *
     * @return The newly created user instance
     * @throws Exception If the role type is {@code null}
     */
    public User create() throws Exception {

        if (roleType == null) {
            throw new Exception("Role type must be defined.");
        }

        switch (roleType) {
            case TUTOR:
                roleDocumentId = tutorRepository.save(new Tutor("")).getId();
                break;
            case STUDENT:
                roleDocumentId = studentRepository.save(new Student(new ArrayList<>())).getId();
                break;
            case INSTRUCTOR:
                roleDocumentId = instructorRepository
                        .save(new Instructor(new ArrayList<>(), new ArrayList<>())).getId();
                break;
            case TEACHING_ASSISTANT:
                roleDocumentId = taRepository.save(new TeachingAssistant("", new ArrayList<>())).getId();
                break;
        }

        return userRepository.save(
                new User(roleDocumentId, roleType, institution, institutionId, courses, name, email,
                        passwordEncoder.encode(password)));

    }

}
